{"version":3,"sources":["routing/route-builder.jsx","constants/types.js","components/header/index.jsx","redux/actions/filterAction.js","components/navigation/navigation-search.jsx","components/navigation/hooks/queryString.js","components/navigation/hooks/useQueryString.js","components/navigation/filter-buttons.jsx","components/navigation/navigation-filter.jsx","components/navigation/index.jsx","components/comments/index.jsx","components/app/index.jsx","routing/route-fabric.jsx","redux/actions/commentAction.js","routing/route.jsx","redux/reducers/commentReducer.js","redux/reducers/filterReducer.js","redux/reducers/root.js","redux/store/configStore.js","index.jsx"],"names":["RouteBuilder","route","path","render","component","comments","filter","Header","className","handleFilterSelect","value","dispatch","type","types","payload","Search","useDispatch","React","useState","input","setInput","handleInput","handleSearchInput","placeholder","onChange","e","target","setQueryStringWithoutPageReload","qsValue","newUrl","window","location","protocol","host","pathname","history","pushState","useQueryString","key","initialValue","queryString","search","values","qs","parse","getQueryStringValue","setValue","useCallback","newValue","newQsValue","stringify","setQueryStringValue","FilterButtons","props","onSetValue","useLocation","useHistory","useEffect","ignoreQueryPrefix","console","log","undefined","buttons","children","button","map","onClick","newType","push","Filter","Navigation","Comments","useSelector","state","comment","areLoaded","commentsArray","name","toLowerCase","includes","email","id","body","App","routes","axois","get","then","res","data","catch","err","RouteFabric","AppRouter","initialState","rootReducer","combineReducers","middleware","thunk","store","createStore","compose","applyMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.350f4570.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Route } from 'react-router-dom';\r\n\r\nexport default function RouteBuilder(route) {\r\n  return <Route path={route.path} render={() => <route.component />} />;\r\n}\r\n","export const comments = {\r\n    LOAD: 'comments/load'\r\n};\r\n\r\nexport const filter = {\r\n    SET_INPUT: 'filter/set/input',\r\n    SET_FILTER: 'filter/set/filter'\r\n};","import React from 'react';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className='Header'>\r\n      <h1 className='Header-Title'>Filtered List</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import * as types from '../../constants/types';\r\n\r\n\r\nexport const handleSearchInput = (value) => (dispatch) => {\r\n    return dispatch({\r\n        type: types.filter.SET_INPUT,\r\n        payload: value\r\n    });\r\n}\r\n\r\nexport const handleFilterSelect = (value) => (dispatch) => {\r\n    return dispatch({\r\n        type: types.filter.SET_FILTER,\r\n        payload: value\r\n    });\r\n}","import React from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { handleSearchInput } from '../../redux/actions/filterAction';\r\n\r\nfunction Search() {\r\n  const dispatch = useDispatch();\r\n\r\n  const [input, setInput] = React.useState('');\r\n  const handleInput = (value) => {\r\n    setInput(value);\r\n    dispatch(handleSearchInput(value));\r\n  };\r\n\r\n  return (\r\n    <div className='Search'>\r\n      <div className='Search-Title'>Search</div>\r\n      <input className='Search-Input' type='text' placeholder='Enter name' value={input} onChange={(e) => handleInput(e.target.value)} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import qs from \"query-string\";\r\n\r\n// Replaces the current query string value with the new provided value without triggering page refresh\r\nexport const setQueryStringWithoutPageReload = qsValue => {\r\n    const newUrl = window.location.protocol + '//' + window.location.host + window.location.pathname + qsValue;\r\n    window.history.pushState({\r\n        path: newUrl\r\n    }, '', newUrl);\r\n}\r\n\r\n// Updates the query string parameters only for the provided key, keeping the remaining parameters intact\r\nexport const setQueryStringValue = (key, value, queryString = window.location.search) => {\r\n    const values = qs.parse(queryString);\r\n    const newQsValue = qs.stringify({\r\n        ...values,\r\n        [key]: value\r\n    });\r\n    setQueryStringWithoutPageReload(`?${newQsValue}`);\r\n}\r\n\r\n// Returns the query string value for the provided key\r\nexport const getQueryStringValue = (key, queryString = window.location.search) => {\r\n    const values = qs.parse(queryString);\r\n    return values[key];\r\n}","import {\r\n    useState,\r\n    useCallback\r\n} from \"react\";\r\n\r\nimport {\r\n    getQueryStringValue,\r\n    setQueryStringValue\r\n} from \"./queryString\";\r\n\r\n// Custom hook to set URL query string\r\nfunction useQueryString(key, initialValue) {\r\n    const [value, setValue] = useState(getQueryStringValue(key) || initialValue);\r\n    const onSetValue = useCallback(newValue => {\r\n        setValue(newValue);\r\n        setQueryStringValue(key, newValue);\r\n    }, [key]);\r\n    return [value, onSetValue];\r\n}\r\n\r\nexport default useQueryString;","import React from 'react';\r\n\r\nimport qs from 'query-string';\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { handleFilterSelect } from '../../redux/actions/filterAction';\r\nimport useQueryString from './hooks/useQueryString';\r\n\r\nexport const FilterButtons = (props) => {\r\n  const dispatch = useDispatch();\r\n  const [value, onSetValue] = useQueryString('filter');\r\n\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  React.useEffect(() => {\r\n    let { filter } = qs.parse(location.search, { ignoreQueryPrefix: true });\r\n    console.log(filter);\r\n    filter === undefined ? dispatch(handleFilterSelect('')) : dispatch(handleFilterSelect(filter));\r\n  });\r\n\r\n  const handleClick = (newType) => {\r\n    if (newType === value) {\r\n      onSetValue('');\r\n      history.push({ search: '?filter=' });\r\n      dispatch(handleFilterSelect(''));\r\n    } else {\r\n      onSetValue(newType);\r\n      history.push({ search: `?filter=${newType}` });\r\n      dispatch(handleFilterSelect(newType));\r\n    }\r\n  };\r\n\r\n  const buttons = props.children.filter((button) => typeof button === 'string');\r\n  console.log(buttons);\r\n\r\n  return (\r\n    <ul className='Filter-Buttons'>\r\n      {buttons.map((button) => (\r\n        <li key={button} onClick={() => handleClick(button)} className={value === button ? 'Filter-Button-active ' : ''}>\r\n          {button}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { FilterButtons } from './filter-buttons';\r\n\r\nfunction Filter() {\r\n  const buttons = ['.org', '.com', '.biz'];\r\n\r\n  return (\r\n    <div className='Filter'>\r\n      <div className='Filter-Title'>Show only</div>\r\n      <FilterButtons children={buttons} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\n\r\nimport Search from './navigation-search';\r\nimport Filter from './navigation-filter';\r\n\r\nfunction Navigation() {\r\n  return (\r\n    <div className='Navigation'>\r\n      <div className='Container Navigation-Container'>\r\n        <Search />\r\n        <Filter />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\n\r\nimport { useLocation } from 'react-router-dom';\r\nimport qs from 'query-string';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction Comments() {\r\n  const { comments, areLoaded } = useSelector((state) => state.comment);\r\n  const { search, filter } = useSelector((state) => state.filter);\r\n\r\n  const commentsArray = comments\r\n    .filter((comment) => {\r\n      if (search === null) return comment;\r\n      else if (comment.name.toLowerCase().includes(search.toLowerCase())) return comment;\r\n    })\r\n    .filter((comment) => {\r\n      if (filter === null) return comment;\r\n      else if (comment.email.includes(filter)) return comment;\r\n    })\r\n    .map((comment) => {\r\n      return (\r\n        <div className='Comment' key={comment.id}>\r\n          <div className='Comment-Name'>{comment.name}</div>\r\n          <div className='Comment-Email'>{comment.email}</div>\r\n          <div className='Comment-Body'>{comment.body}</div>\r\n        </div>\r\n      );\r\n    });\r\n\r\n  return (\r\n    <main className='CommentSection'>\r\n      <div className='Container CommentSection-Container'>\r\n        {areLoaded ? commentsArray : <div className='CommentSection-Empty'>No data loaded!</div>}\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Comments;\r\n","import React from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport loadComments from '../../redux/actions/commentAction';\r\n\r\nimport Header from '../header';\r\nimport Navigation from '../navigation';\r\nimport Comments from '../comments';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  React.useEffect(() => {\r\n    dispatch(loadComments());\r\n  });\r\n\r\n  return (\r\n    <div className='App'>\r\n      <Header />\r\n      <Navigation />\r\n      <Comments />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\n\r\nimport { Switch } from 'react-router-dom';\r\nimport RouteBuilder from './route-builder';\r\n\r\nimport App from '../components/app';\r\n\r\nconst routes = [\r\n  {\r\n    path: '/',\r\n    component: App,\r\n  },\r\n];\r\n\r\nexport default function RouteFabric() {\r\n  return (\r\n    <>\r\n      <Switch>\r\n        {routes.map(({ path, component }) => (\r\n          <RouteBuilder key={path} path={path} component={component} />\r\n        ))}\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\n","import * as types from '../../constants/types';\r\nimport axois from 'axios';\r\n\r\nconst loadComments = () => (dispatch) => {\r\n  axois\r\n    .get('https://jsonplaceholder.typicode.com/comments')\r\n    .then((res) =>\r\n      dispatch({\r\n        type: types.comments.LOAD,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport {\r\n  loadComments as\r\n  default\r\n};","import React from 'react';\r\n\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport RouteFabric from './route-fabric';\r\n\r\nconst AppRouter = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <RouteFabric />\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import * as types from '../../constants/types';\r\n\r\nconst initialState = {\r\n    comments: [],\r\n    areLoaded: false\r\n}\r\n\r\nexport default (state = initialState, {\r\n    type,\r\n    payload\r\n}) => {\r\n    switch (type) {\r\n\r\n        case types.comments.LOAD: {\r\n            return {\r\n                ...state,\r\n                comments: payload,\r\n                areLoaded: true\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import * as types from '../../constants/types';\r\n\r\nconst initialState = {\r\n    search: null,\r\n    filter: ''\r\n}\r\n\r\nexport default (state = initialState, {\r\n    type,\r\n    payload\r\n}) => {\r\n    switch (type) {\r\n\r\n        case types.filter.SET_INPUT: {\r\n            return {\r\n                ...state,\r\n                search: payload\r\n            }\r\n        }\r\n\r\n        case types.filter.SET_FILTER: {\r\n            return {\r\n                ...state,\r\n                filter: payload\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {\r\n  combineReducers\r\n} from \"redux\";\r\n\r\nimport commentReducer from \"./commentReducer\";\r\nimport filterReducer from \"./filterReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  comment: commentReducer,\r\n  filter: filterReducer\r\n});\r\n\r\nexport default rootReducer;","import {\r\n  createStore,\r\n  compose,\r\n  applyMiddleware\r\n} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from '../reducers/root';\r\n\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  compose(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport AppRouter from './routing/route';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store/configStore';\r\n\r\nimport './style/scss/template.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <AppRouter />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}